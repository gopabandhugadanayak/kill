Car.h

#ifndef CAR_H
#define CAR_H

#include <string>
#include <functional>
#include "Engine.h"

class Car {
private:
    std::string m_car_reg_number;
    float m_price;
    std::reference_wrapper<Engine> m_car_engine;

public:
    Car(const std::string& car_reg_number, float price, Engine& car_engine);

    // Getter functions
    std::string getCarRegNumber() const;
    float getPrice() const;
    Engine& getCarEngine() const;
};

#endif // CAR_H


Car.cpp

#include "Car.h"
#include <stdexcept>

Car::Car(const std::string& car_reg_number, float price, Engine& car_engine)
    : m_car_reg_number(car_reg_number), m_price(price), m_car_engine(car_engine) {
    if (price < 0) {
        throw std::invalid_argument("Price must be non-negative.");
    }
}

std::string Car::getCarRegNumber() const {
    return m_car_reg_number;
}

float Car::getPrice() const {
    return m_price;
}

Engine& Car::getCarEngine() const {
    return m_car_engine.get();
}


Engine.h

#ifndef ENGINE_H
#define ENGINE_H

#include <string>
#include "EngineType.h"

class Engine {
private:
    std::string m_engine_number;
    int m_engine_torque;
    int m_horsepower;
    EngineType m_engine_type;

public:
    Engine(const std::string& engine_number, int engine_torque, int horsepower, EngineType engine_type);

    // Getter functions
    std::string getEngineNumber() const;
    int getEngineTorque() const;
    int getHorsepower() const;
    EngineType getEngineType() const;
};

#endif // ENGINE_H


Engine.cpp

#include "Engine.h"
#include <stdexcept>

Engine::Engine(const std::string& engine_number, int engine_torque, int horsepower, EngineType engine_type)
    : m_engine_number(engine_number), m_engine_torque(engine_torque), m_horsepower(horsepower), m_engine_type(engine_type) {
    if (engine_torque < 0 || horsepower < 0) {
        throw std::invalid_argument("Torque and horsepower must be non-negative.");
    }
}

std::string Engine::getEngineNumber() const {
    return m_engine_number;
}

int Engine::getEngineTorque() const {
    return m_engine_torque;
}

int Engine::getHorsepower() const {
    return m_horsepower;
}

EngineType Engine::getEngineType() const {
    return m_engine_type;
}


EngineType.h

#ifndef ENGINETYPE_H
#define ENGINETYPE_H

enum class EngineType {
    CRDI,
    MPFI,
    TURBOCHARGED
};

#endif // ENGINETYPE_H


Operation.h


#ifndef OPERATION_H
#define OPERATION_H

#include <vector>
#include <memory>
#include <optional>
#include "Car.h"

class Operation {
private:
    Operation() {}
    static Operation* instance;

public:
    static Operation* getInstance();

    std::vector<std::shared_ptr<Car>> createInstances(int numInstances);
    std::vector<std::reference_wrapper<Engine>> getEngineReferences(const std::vector<std::shared_ptr<Car>>& cars);
    bool allTorqueAboveThreshold(const std::vector<std::shared_ptr<Car>>& cars, int threshold);
    std::optional<double> averageHorsepowerAbovePrice(const std::vector<std::shared_ptr<Car>>& cars, float threshold);
    std::optional<EngineType> findEngineTypeByRegNumber(const std::vector<std::shared_ptr<Car>>& cars, const std::string& regNumber);
    std::optional<std::reference_wrapper<Engine>> findHighestTorqueEngine(const std::vector<std::shared_ptr<Car>>& cars);
};

#endif // OPERATION_H


Operation.cpp


#include "Operation.h"
#include <algorithm>
#include <numeric>
#include <limits>

Operation* Operation::instance = nullptr;

Operation* Operation::getInstance() {
    if (!instance) {
        instance = new Operation();
    }
    return instance;
}

std::vector<std::shared_ptr<Car>> Operation::createInstances(int numInstances) {
    std::vector<std::shared_ptr<Car>> instances;
    for (int i = 0; i < numInstances; ++i) {
        Engine engine("Engine_" + std::to_string(i), 150, 200, EngineType::CRDI); // Sample engine data
        std::shared_ptr<Car> car = std::make_shared<Car>("Car_" + std::to_string(i), 50000, engine); // Sample car data
        instances.push_back(car);
    }
    return instances;
}

std::vector<std::reference_wrapper<Engine>> Operation::getEngineReferences(const std::vector<std::shared_ptr<Car>>& cars) {
    std::vector<std::reference_wrapper<Engine>> engineRefs;
    for (const auto& car : cars) {
        engineRefs.push_back(std::ref(car->getCarEngine()));
    }
    return engineRefs;
}

bool Operation::allTorqueAboveThreshold(const std::vector<std::shared_ptr<Car>>& cars, int threshold) {
    return std::all_of(cars.begin(), cars.end(), [threshold](const auto& car) {
        return car->getCarEngine().getEngineTorque() > threshold;
    });
}

std::optional<double> Operation::averageHorsepowerAbovePrice(const std::vector<std::shared_ptr<Car>>& cars, float threshold) {
    auto aboveThreshold = std::find_if(cars.begin(), cars.end(), [threshold](const auto& car) {
        return car->getPrice() > threshold;
    });
    if (aboveThreshold == cars.end()) {
        return std::nullopt; // No car above threshold
    }

    double sumHorsepower = 0;
    int count = 0;
    for (; aboveThreshold != cars.end(); ++aboveThreshold) {
        sumHorsepower += (*aboveThreshold)->getCarEngine().getHorsepower();
        ++count;
    }
    return sumHorsepower / count;
}

std::optional<EngineType> Operation::findEngineTypeByRegNumber(const std::vector<std::shared_ptr<Car>>& cars, const std::string& regNumber) {
    auto car = std::find_if(cars.begin(), cars.end(), [regNumber](const auto& car) {
        return car->getCarRegNumber() == regNumber;
    });
    if (car != cars.end()) {
        return car->get()->getCarEngine().getEngineType();
    }
    return std::nullopt;
}

std::optional<std::reference_wrapper<Engine>> Operation::findHighestTorqueEngine(const std::vector<std::shared_ptr<Car>>& cars) {
    auto maxTorqueCar = std::max_element(cars.begin(), cars.end(), [](const auto& car1, const auto& car2) {
        return car1->getCarEngine().getEngineTorque() < car2->getCarEngine().getEngineTorque();
    });
    if (maxTorqueCar != cars.end()) {
        return std::ref((*maxTorqueCar)->getCarEngine());
    }
    return std::nullopt;
}



Main.cpp


#include <iostream>
#include <vector>
#include <future>
#include "Operation.h"

int main() {
    try {
        Operation* operation = Operation::getInstance();
        std::vector<std::shared_ptr<Car>> cars;
        std::future<std::vector<std::shared_ptr<Car>>> future_createInstances = std::async(std::launch::async, &Operation::createInstances, operation, 5);
        cars = future_createInstances.get();

        std::future<std::vector<std::reference_wrapper<Engine>>> future_getEngineReferences = std::async(std::launch::async, &Operation::getEngineReferences, operation, std::ref(cars));
        std::vector<std::reference_wrapper<Engine>> engineRefs = future_getEngineReferences.get();
        std::cout << "Number of engine references: " << engineRefs.size() << std::endl;

        std::future<bool> future_allTorqueAboveThreshold = std::async(std::launch::async, &Operation::allTorqueAboveThreshold, operation, std::ref(cars), 120);
        bool allTorqueAbove = future_allTorqueAboveThreshold.get();
        std::cout << "All torque above 120: " << std::boolalpha << allTorqueAbove << std::endl;

        std::future<std::optional<double>> future_averageHorsepowerAbovePrice = std::async(std::launch::async, &Operation::averageHorsepowerAbovePrice, operation, std::ref(cars), 45000);
        std::optional<double> avgHorsepowerAbovePrice = future_averageHorsepowerAbovePrice.get();
        if (avgHorsepowerAbovePrice) {
            std::cout << "Average horsepower for cars above $45,000: " << *avgHorsepowerAbovePrice << std::endl;
        } else {
            std::cout << "No cars found above $45,000." << std::endl;
        }

        std::future<std::optional<EngineType>> future_findEngineTypeByRegNumber = std::async(std::launch::async, &Operation::findEngineTypeByRegNumber, operation, std::ref(cars), "Car_2");
        std::optional<EngineType> engineTypeByRegNumber = future_findEngineTypeByRegNumber.get();
        if (engineTypeByRegNumber) {
            std::cout << "Engine type for car with registration number 'Car_2': ";
            switch (*engineTypeByRegNumber) {
                case EngineType::CRDI:
                    std::cout << "CRDI";
                    break;
                case EngineType::MPFI:
                    std::cout << "MPFI";
                    break;
                case EngineType::TURBOCHARGED:
                    std::cout << "TURBOCHARGED";
                    break;
            }
            std::cout << std::endl;
        } else {
            std::cout << "Car with registration number 'Car_2' not found." << std::endl;
        }

        std::future<std::optional<std::reference_wrapper<Engine>>> future_findHighestTorqueEngine = std::async(std::launch::async, &Operation::findHighestTorqueEngine, operation, std::ref(cars));
        std::optional<std::reference_wrapper<Engine>> highestTorqueEngine = future_findHighestTorqueEngine.get();
        if (highestTorqueEngine) {
            std::cout << "Engine with highest torque: " << highestTorqueEngine->get().getEngineNumber() << std::endl;
        } else {
            std::cout << "No engines found." << std::endl;
        }
    } catch (const std::exception& ex) {
        std::cerr << "Exception occurred: " << ex.what() << std::endl;
    }

    return 0;
}


Terminal commnad : g++ *.cpp --std=c++17 -pthread -o app && ./app

